(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.dokLib = f()}})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
const { SocketClient } = require("dok-socket-client");
const randomEmoji = require('random-unicode-emoji');

module.exports = {
    SocketClient,
    randomEmoji,
};
},{"dok-socket-client":3,"random-unicode-emoji":5}],2:[function(require,module,exports){
/**
	Dok-gamelib engine

	Description: Game engine for producing web games easily using JavaScript and WebGL
	Author: jacklehamster
	Sourcode: https://github.com/jacklehamster/dok-gamelib
	Year: 2020
 */


/**
  *	  class Pool
  */

class Pool {
	
	constructor(createCall, initCall) {
		this.createCall = createCall;
		this.initCall = initCall;
		this.pool = [];
		this.recycler = [];
		this.index = 0;
	}

	recycle(element, init) {
		if (init && this.initCall) {
			this.initCall(element);
		}
		this.recycler.push(element);
	}

	get(init) {
		if (this.recycler.length) {
			return this.recycler.pop();
		}

		if (this.index >= this.pool.length) {
			this.pool.push(this.createCall());
		}
		const value = this.pool[this.index];
		if (init && this.initCall) {
			this.initCall(value);
		}
		this.index++;
		return value;
	}

	reset() {
		this.index = 0;
	}
}

module.exports = {
	Pool,
};

},{}],3:[function(require,module,exports){
const { Pool } = require("dok-pool");
const { Utils } = require("dok-utils");

/**
	Dok-gamelib engine

	Description: Game engine for producing web games easily using JavaScript and WebGL
	Author: jacklehamster
	Sourcode: https://github.com/jacklehamster/dok-gamelib
	Year: 2020
 */
const SocketStatus = {
	CONNECTING: 1,
	CONNECTED: 2,
};

class SocketClient {
	constructor(backupServer) {
		this.onConnectListener = [];
		this.onUpdateListener = [];
		this.onReadyListener = [];
		this.sockets = {};
		this.connections = {};
		this.room = null;
		this.id = null;
		this.data = {};
		this.sharedData = {};
		this.ids = [];
		this.pool = new Pool(() => [], array => array.length = 0);
		this.backupServer = backupServer;
		this.registry = {};
		Utils.get(`/socket.info`)
			.then(response => this.onLocalSocketConfirmed(response === "ok"))
			.catch(() => this.onLocalSocketConfirmed(false));
	}

	wrap(name, action) {
		this.registry[name] = action;
		return (...params) => {
			action(...params);
			this.connect("data", socket => {
				socket.emit("action", this.room || null, name, params);
			});
		};
	}

	onLocalSocketConfirmed(localSocketAvailable) {
		this.localSocketAvailable = localSocketAvailable;
		this.importScript(this.localSocketAvailable ? "/socket.io/socket.io.js" : `${this.backupServer}/socket.io/socket.io.js`);
		this.onReadyListener.forEach(callback => callback());
	}

	whenReady(callback) {
		if (this.localSocketAvailable) {
			callback();
		} else {
			this.addEventListener("ready", callback);
		}
	}

	getSharedDataAt(index) {
		if (index === 0) {
			return this.data;
		}
		const id = this.ids[index - 1];
		return this.sharedData[id];
	}

	getIdAt(index) {
		if (index === 0) {
			return this.id;
		}
		return this.ids[index - 1];
	}

	getSharedData(id) {
		return this.sharedData[id];
	}

	dataCount() {
		return this.ids.length + 1;
	}

	join(room) {
		this.room = room;
		this.connect("data", socket => {
			socket.emit("join", room, this.data);
		});
	}

	leave(room) {
		this.clear();
		this.connect("data", socket => {
			socket.emit("leave", room);
		});		
	}

	clear() {
		if (this.room || this.id) {
			this.ids.length = 0;
			this.room = null;
			this.id = null;
			this.data = {};
			this.sharedData = {};
		}
	}

	update(newData) {
		const updates = SocketClient.createUpdateBatch(newData, this.data, this.pool);
		SocketClient.applyBatch(updates, this.data);
		if (updates.length) {
			this.connect("data", socket => {
				socket.emit("update", this.room || null, updates);
			});
		}

		this.pool.reset();
	}

	importScript(src) {
		if (self.importScripts) {
			self.importScripts(src);
		} else {
			const script = document.createElement("script");
			script.src = src;
			document.body.appendChild(script);
		}
	}

	addEventListener(type, callback) {
		const listener = this.getListeners(type);
		listener.push(callback);
	}

	removeEventListener(type, callback) {
		const listener = this.getListeners(type);
		const index = listener.indexOf(callback);
		listener.splice(index, 1);
	}

	getListeners(type) {
		switch(type) {
			case "connect":
				return this.onConnectListener;
			case "update":
				return this.onUpdateListener;
			case "ready":
				return this.onReadyListener;
		}
	}

	static dataEquals(newData, oldData) {
		if (newData === null ) {
			return oldData === newData;
		}
		if (Array.isArray(newData)) {
			if (!Array.isArray(oldData) || newData.length !== oldData.length) {
				return false;
			}
			for (let i = 0; i < newData.length; i++) {
				if (!SocketClient.dataEquals(newData[i], oldData[i])) {
					return false;
				}
			}
		} else if (typeof(newData) === "object") {
			if (typeof(oldData) !== "object") {
				return false;
			}
			for (let i in newData) {
				if (!SocketClient.dataEquals(newData[i], oldData[i])) {
					return false;
				}
			}
		}
		return oldData === newData;
	}

	static createUpdateBatch(newData, oldData, pool) {
		const batch = pool.get(true);
		for (let i in oldData) {
			if (typeof(newData[i])==='undefined') {
				batch.push([i]);
			}
		}
		for (let i in newData) {
			if (!SocketClient.dataEquals(newData[i], oldData[i])) {
				const pair = pool.get(true);
				pair[0] = i;
				pair[1] = newData[i];
				batch.push(pair);
			}
		}
		return batch;
	}

	static applyBatch(updates, data) {
    	for (let i = 0; i < updates.length; i++) {
    		const pair = updates[i];
    		if (pair.length === 1) {
    			delete data[field];
    		} else {
				const [ field, value ] = pair;
				data[field] = SocketClient.assignData(data[field], value);
    		}
    	}	
	}

	static assignData(to, from) {
		if (Array.isArray(from)) {
			if (!Array.isArray(to)) {
				to = [];
			}
			to.length = from.length;
			for (let i = 0; i < from.length; i++) {
				to[i] = SocketClient.assignData(to[i], from[i]);
			}
		} else if (typeof(from) === "object" && from !== null) {
			if (typeof(to) !== "object") {
				to = {};
			}
			for (let i in to) {
				if (typeof(from[i])==='undefined') {
					delete to[i];
				}
			}
			for (let i in from) {
				to[i] = SocketClient.assignData(to[i], from[i]);
			}
		} else {
			to = from;
		}
		return to;
	}

	onDataUpdated(id) {
    	for (let i = 0; i < this.onUpdateListener.length; i++) {
    		this.onUpdateListener[i](id, this.sharedData[id]);
    	}		
	}

	connect(namespace, callback) {
		if (this.connections[namespace] === SocketStatus.CONNECTED) {
			callback(this.sockets[namespace]);
		} else if (this.connections[namespace] === SocketStatus.CONNECTING) {
			this.addEventListener("connect", callback);
		} else {
			this.connections[namespace] = SocketStatus.CONNECTING;
			this.addEventListener("connect", callback);

			this.whenReady(() => {
				const socket = this.sockets[namespace] = this.localSocketAvailable ? io(`/${namespace||""}`) : io(`${this.backupServer}/${namespace||""}`);
				this.onConnectListener.forEach(listener => listener(socket, namespace));
				this.onConnectListener.length = 0;
				this.connections[namespace] = SocketStatus.CONNECTED;

			    socket.on('connected', () => console.log("Connected."));

			    socket.on('update', (id, updates) => {
			    	if (this.sharedData[id]) {
				    	SocketClient.applyBatch(updates, this.sharedData[id]);
				    	this.onDataUpdated(id);
			    	}
			    });

			    socket.on('action', (id, name, params) => {
			    	if (this.registry[name]) {
			    		this.registry[name].apply(null, params);
			    	}
			    });

			    socket.on('joined', (id, data) => {
			    	if (!this.sharedData[id]) {
			    		this.ids.push(id);
			    	}
			    	this.sharedData[id] = data;
			    	this.onDataUpdated(id);
			    	socket.emit("welcome", id, this.data);
			    });

			    socket.on("welcome", (id, data) => {
			    	console.log("welcome", id, data);
			    	if (!this.sharedData[id]) {
			    		this.ids.push(id);
			    	}
			    	this.sharedData[id] = data;
			    	this.onDataUpdated(id);
			    });

			    socket.on('self-joined', id => {
			    	console.log("self-joined", id);
			    	this.id = id;
			    	this.sharedData[id] = this.data;
			    });

			    socket.on('left', id => {
			    	if (this.sharedData[id]) {
				    	delete this.sharedData[id];
				    	for (let i = 0; i < this.ids.length; i++) {
				    		if (this.ids[i] === id) {
				    			this.ids[i] = this.ids[this.ids.length - 1];
				    			this.ids.pop();
				    			break;
				    		}
				    	}
				    	this.onDataUpdated(id);
			    	}
			    });
			});
		}
	}
}

module.exports = {
	SocketClient,
};
},{"dok-pool":2,"dok-utils":4}],4:[function(require,module,exports){
/**
	Dok-gamelib engine

	Description: Game engine for producing web games easily using JavaScript and WebGL
	Author: jacklehamster
	Sourcode: https://github.com/jacklehamster/dok-gamelib
	Year: 2020
 */



const cache = {};

class Utils {
	static count(obj) {
		let num = 0;
		for (let i in obj) {
			num++;
		}
		return num;
	}

	static clear3(vector) {
		vector[0] = vector[1] = vector[2] = 0;
		return vector;
	}

	static set3(vector, x, y, z) {
		vector[0] = x;
		vector[1] = y;
		vector[2] = z;
		return vector;
	}

	static set4(vector, a, b, c, d) {
		vector[0] = a;
		vector[1] = b;
		vector[2] = c;
		vector[3] = d;
		return vector;
	}

	static equal3(vector, x, y, z) {
		return vector[0] === x && vector[1] === y && vector[2] === z;
	}

	static equal4(vector, a, b, c, d) {
		return vector[0] === a && vector[1] === b && vector[2] === c && vector[3] === d;
	}

	static getDOMColor(color) {
		return `#${(0x1000000 | color).toString(16).substr(1)}`;		
	}

	static getFromArray(array, index) {
		return array[(index % array.length + array.length) % array.length];
	}

	static get(url) {
		return new Promise((resolve, reject) => {
		    const req = cache[url] ? cache[url].req : new XMLHttpRequest();
		    if (!cache[url]) {
		    	cache[url] = { req };
		    }
		    req.open('GET', url);

		    req.addEventListener('load', e => {
				if (req.status === 200) {
					resolve(req.response);
				} else {
					reject(e);
				}
		    });
		    req.addEventListener('error', e => {
		    	reject(e);
		    });
		    req.send();
		});
	}
	
	static load(urls, {progress, complete, error}) {
		const progresses = urls.map(() => 0);
		const images = urls.map(() => null);
		const errors = urls.map(() => null);
		let imageLoading = 0;

		const checkCompletion = () => {
			if (imageLoading) {
				return;
			}
			for (let i = 0; i < images.length; i++) {
				if (!images[i] && !errors[i]) {
					return;
				}
			}
			if (errors.filter(a => a).length > 0) {
				if (error)
					error(errors.filter(a => a));
			} else {
				if (complete)
					complete(images);
			}
		};

		urls.forEach((url, index) => {
			const shouldLoad = !cache[url];
			if (cache[url] && cache[url].result) {
				images[index] = cache[url].result;
				checkCompletion();
				return;
			}
		    const req = cache[url] ? cache[url].req : new XMLHttpRequest();
		    if (!cache[url]) {
		    	cache[url] = { req };
		    }
		    req.open('GET', url);
	        req.responseType = 'blob';

		    req.addEventListener('load', e => {
				if (req.status === 200) {
					if (url.match(/.(jpg|jpeg|png|gif)$/i)) {
						const imageURL = URL.createObjectURL(req.response);
						const image = new Image();
						imageLoading++;
						image.addEventListener("load", e => {
							URL.revokeObjectURL(imageURL);
							imageLoading --;
							checkCompletion();
						});
						cache[url].result = image;
						image.src = imageURL;
						images[index] = image;
					} else {
						cache[url].result = req.response;
						images[index] = cache[url].result;
						checkCompletion();
					}
				}
				else {
					cache[url].error = Error(req.statusText);
					errors[index] = cache[url].error;
					checkCompletion();
				}
		    });
		    req.addEventListener('error', e => {
		    	cache[url].error = Error("Network Error");
		    	errors[index] = cache[url].error;
				checkCompletion();
		    });
		    req.addEventListener('progress', e => {
		    	progresses[index] = e.loaded / e.total;
		    	if (progress)
			    	progress(progresses.reduce((avg, num, _, {length}) => avg + 100 * num / length, 0));
		    });

		    if (shouldLoad) {
			    req.send();
		    }
		});
	}
}

module.exports = {
	Utils,
};

},{}],5:[function(require,module,exports){
// returns an array with a specified number of random unicode emojis

var emojis = ["⌚","⏩","⏪","⏫","⏰","⏳","◽","☔","♈","♉","♊","♋","♌","♍","♎","♏","♐","♑","♒","♿","⚓","⚡","⚪","⚽","⛄","⛎","⛔","⛪","⛲","⛵","⛺","⛽","✅","✊","✨","❌","❎","❓","❔","❗","➕","➖","➰","➿","⬛","⭐","⭕","🀄","🃏","🆎","🆑","🆒","🆓","🆔","🆕","🆖","🆗","🆘","🆙","🈁","🈚","🈯","🈲","🈳","🈴","🈵","🈸","🈹","🉐","🌀","🌁","🌂","🌃","🌄","🌅","🌆","🌇","🌈","🌉","🌊","🌋","🌍","🌏","🌐","🌑","🌒","🌓","🌔","🌖","🌗","🌙","🌚","🌛","🌜","🌝","🌟","🌭","🌮","🌰","🌲","🌴","🌷","🌸","🌹","🌺","🌻","🌼","🌽","🌾","🌿","🍀","🍁","🍂","🍃","🍄","🍅","🍆","🍇","🍈","🍉","🍋","🍌","🍍","🍎","🍐","🍑","🍒","🍓","🍔","🍕","🍖","🍗","🍘","🍙","🍚","🍛","🍜","🍝","🍞","🍟","🍠","🍡","🍢","🍣","🍤","🍥","🍦","🍧","🍨","🍩","🍪","🍫","🍬","🍭","🍮","🍯","🍰","🍱","🍲","🍳","🍴","🍵","🍶","🍷","🍸","🍹","🍺","🍼","🍾","🎀","🎁","🎂","🎃","🎄","🎅","🎆","🎇","🎈","🎉","🎊","🎋","🎌","🎍","🎎","🎏","🎐","🎑","🎒","🎠","🎡","🎢","🎣","🎤","🎥","🎦","🎧","🎨","🎩","🎪","🎫","🎬","🎭","🎮","🎯","🎰","🎱","🎲","🎳","🎴","🎵","🎶","🎷","🎸","🎹","🎺","🎻","🎼","🎽","🎾","🎿","🏀","🏁","🏂","🏃","🏅","🏆","🏇","🏈","🏉","🏊","🏏","🏐","🏑","🏒","🏠","🏡","🏢","🏤","🏥","🏦","🏧","🏨","🏩","🏪","🏫","🏬","🏭","🏮","🏯","🏴","🏸","🏹","🏺","🏻","🏼","🏽","🏾","🏿","🐀","🐁","🐂","🐃","🐄","🐅","🐆","🐈","🐉","🐊","🐌","🐍","🐏","🐑","🐓","🐔","🐕","🐖","🐗","🐘","🐙","🐚","🐛","🐜","🐝","🐞","🐟","🐠","🐡","🐢","🐣","🐤","🐥","🐦","🐧","🐨","🐪","🐫","🐬","🐭","🐮","🐯","🐰","🐱","🐲","🐳","🐴","🐵","🐶","🐷","🐸","🐹","🐺","🐻","🐼","🐽","👀","👂","👃","👄","👅","👆","👇","👈","👉","👊","👋","👌","👍","👎","👏","👐","👑","👒","👓","👔","👕","👖","👗","👘","👙","👚","👛","👜","👝","👞","👟","👠","👡","👢","👣","👥","👦","👧","👨","👩","👪","👬","👮","👯","👰","👱","👲","👳","👴","👵","👶","👷","👸","👹","👺","👻","👼","👽","👾","👿","💀","💁","💂","💃","💄","💅","💆","💇","💈","💉","💊","💋","💌","💍","💎","💏","💐","💑","💒","💓","💔","💕","💖","💗","💘","💙","💚","💛","💜","💝","💞","💟","💠","💡","💢","💣","💤","💥","💦","💧","💨","💩","💪","💫","💭","💮","💯","💰","💱","💲","💳","💴","💶","💸","💹","💺","💻","💼","💽","💾","💿","📀","📁","📂","📃","📄","📅","📆","📇","📈","📉","📊","📋","📌","📍","📎","📏","📐","📑","📒","📓","📔","📕","📖","📗","📘","📙","📚","📛","📜","📝","📞","📟","📠","📡","📢","📣","📤","📥","📦","📧","📨","📩","📪","📬","📮","📯","📰","📱","📲","📳","📵","📶","📸","📹","📺","📻","📿","🔀","🔁","🔃","🔄","🔅","🔆","🔈","🔉","🔊","🔋","🔌","🔍","🔎","🔏","🔐","🔑","🔒","🔓","🔕","🔖","🔗","🔘","🔙","🔚","🔛","🔜","🔝","🔞","🔟","🔠","🔡","🔢","🔣","🔤","🔥","🔦","🔧","🔨","🔩","🔪","🔬","🔮","🔯","🔰","🔱","🔲","🔳","🔴","🔵","🔶","🔷","🔸","🔹","🔺","🔻","🔼","🕋","🕌","🕍","🕐","🕑","🕒","🕓","🕔","🕕","🕖","🕗","🕘","🕙","🕚","🕜","🕝","🕞","🕟","🕠","🕡","🕢","🕣","🕤","🕥","🕦","🕺","🖕","🖤","🗻","🗼","🗽","🗾","😀","😁","😂","😃","😄","😅","😇","😉","😊","😋","😌","😎","😏","😐","😑","😒","😓","😕","😖","😗","😘","😙","😚","😛","😜","😝","😟","😠","😡","😢","😣","😤","😦","😨","😩","😪","😬","😭","😮","😰","😱","😲","😴","😵","😶","😷","😸","😹","😺","😻","😼","😽","😾","😿","🙁","🙂","🙃","🙅","🙆","🙇","🙈","🙉","🙊","🙋","🙌","🙍","🙎","🚀","🚁","🚃","🚄","🚆","🚇","🚈","🚉","🚊","🚌","🚍","🚎","🚏","🚐","🚑","🚒","🚔","🚕","🚖","🚗","🚘","🚙","🚛","🚜","🚝","🚞","🚟","🚠","🚢","🚣","🚤","🚦","🚧","🚨","🚩","🚪","🚫","🚬","🚮","🚯","🚰","🚲","🚳","🚴","🚶","🚷","🚹","🚺","🚻","🚼","🚽","🚿","🛀","🛁","🛂","🛃","🛄","🛌","🛐","🛑","🛕","🛖","🛜","🛝","🛞","🛫","🛴","🛵","🛷","🛹","🛺","🛻","🟠","🟡","🟢","🟣","🟤","🟥","🟦","🟧","🟨","🟩","🟪","🟰","🤌","🤍","🤎","🤐","🤑","🤒","🤓","🤔","🤕","🤖","🤗","🤙","🤚","🤛","🤜","🤝","🤟","🤠","🤡","🤢","🤣","🤤","🤥","🤦","🤨","🤩","🤪","🤫","🤬","🤭","🤮","🤰","🤱","🤳","🤴","🤵","🤶","🤷","🤸","🤹","🤼","🤽","🤿","🥀","🥁","🥂","🥃","🥄","🥇","🥈","🥉","🥊","🥌","🥍","🥎","🥐","🥑","🥒","🥓","🥔","🥕","🥖","🥗","🥘","🥙","🥚","🥛","🥜","🥝","🥟","🥠","🥡","🥢","🥣","🥤","🥥","🥦","🥧","🥨","🥩","🥪","🥬","🥭","🥮","🥯","🥱","🥲","🥳","🥴","🥵","🥷","🥹","🥺","🥻","🥼","🥽","🥾","🦀","🦁","🦂","🦃","🦅","🦆","🦇","🦈","🦉","🦊","🦋","🦌","🦍","🦎","🦏","🦐","🦒","🦓","🦔","🦕","🦖","🦘","🦙","🦚","🦛","🦜","🦝","🦞","🦟","🦠","🦡","🦣","🦥","🦦","🦧","🦨","🦩","🦫","🦬","🦮","🦰","🦱","🦲","🦳","🦴","🦵","🦶","🦷","🦸","🦺","🦻","🦼","🦽","🦾","🧀","🧁","🧃","🧄","🧅","🧆","🧇","🧈","🧉","🧋","🧌","🧍","🧎","🧐","🧑","🧒","🧓","🧔","🧕","🧖","🧗","🧘","🧙","🧚","🧛","🧜","🧝","🧞","🧟","🧠","🧡","🧢","🧣","🧤","🧥","🧧","🧨","🧩","🧪","🧫","🧬","🧭","🧮","🧯","🧰","🧱","🧲","🧳","🧴","🧵","🧶","🧷","🧸","🧹","🧺","🧻","🧼","🧽","🧾","🩰","🩱","🩲","🩴","🩵","🩶","🩸","🩹","🩻","🪀","🪁","🪃","🪄","🪅","🪇","🪐","🪑","🪒","🪓","🪔","🪖","🪗","🪘","🪙","🪚","🪛","🪜","🪝","🪞","🪟","🪠","🪡","🪢","🪣","🪤","🪥","🪦","🪧","🪩","🪪","🪫","🪭","🪮","🪰","🪱","🪲","🪳","🪴","🪵","🪷","🪸","🪹","🪻","🪼","🪿","🫀","🫁","🫃","🫄","🫎","🫐","🫑","🫒","🫓","🫔","🫕","🫗","🫘","🫚","🫠","🫡","🫢","🫣","🫤","🫥","🫦","🫨","🫰","🫱","🫲","🫳","🫴","🫵","🫷","©️","®️","‼️","⁉️","™️","ℹ️","↔️","↕️","↖️","↗️","↘️","↙️","↩️","↪️","⌨️","⏏️","⏭️","⏮️","⏯️","⏱️","⏲️","⏸️","⏹️","⏺️","Ⓜ️","▪️","▫️","▶️","◀️","◻️","◼️","☀️","☁️","☂️","☃️","☄️","☎️","☑️","☘️","☝️","☠️","☢️","☣️","☦️","☪️","☮️","☯️","☸️","☹️","☺️","♀️","♂️","♟️","♠️","♣️","♥️","♦️","♨️","♻️","♾️","⚒️","⚔️","⚕️","⚖️","⚗️","⚙️","⚛️","⚜️","⚠️","⚧️","⚰️","⚱️","⛈️","⛏️","⛑️","⛓️","⛩️","⛰️","⛱️","⛴️","⛷️","⛸️","⛹️","✂️","✈️","✉️","✌️","✍️","✏️","✒️","✔️","✖️","✝️","✡️","✳️","✴️","❄️","❇️","❣️","❤️","➡️","⤴️","⤵️","⬅️","⬆️","⬇️","〰️","〽️","㊗️","㊙️","🅰️","🅱️","🅾️","🅿️","🈂️","🈷️","🌡️","🌤️","🌥️","🌦️","🌧️","🌨️","🌩️","🌪️","🌫️","🌬️","🌶️","🍽️","🎖️","🎗️","🎙️","🎚️","🎛️","🎞️","🎟️","🏋️","🏌️","🏍️","🏎️","🏔️","🏕️","🏖️","🏗️","🏘️","🏙️","🏚️","🏛️","🏜️","🏝️","🏞️","🏟️","🏳️","🏵️","🏷️","🐿️","👁️","📽️","🕉️","🕊️","🕯️","🕰️","🕳️","🕴️","🕵️","🕶️","🕷️","🕸️","🕹️","🖇️","🖊️","🖋️","🖌️","🖍️","🖐️","🖥️","🖨️","🖱️","🖲️","🖼️","🗂️","🗃️","🗄️","🗑️","🗒️","🗓️","🗜️","🗝️","🗞️","🗡️","🗣️","🗨️","🗯️","🗳️","🗺️","🛋️","🛍️","🛎️","🛏️","🛠️","🛡️","🛢️","🛣️","🛤️","🛥️","🛩️","🛰️","🛳️","#️⃣","*️⃣","0️⃣","1️⃣","2️⃣","3️⃣","4️⃣","5️⃣","6️⃣","7️⃣","8️⃣","9️⃣","🇦🇨","🇦🇩","🇦🇪","🇦🇫","🇦🇬","🇦🇮","🇦🇱","🇦🇲","🇦🇴","🇦🇶","🇦🇷","🇦🇸","🇦🇹","🇦🇺","🇦🇼","🇦🇽","🇦🇿","🇧🇦","🇧🇧","🇧🇩","🇧🇪","🇧🇫","🇧🇬","🇧🇭","🇧🇮","🇧🇯","🇧🇱","🇧🇲","🇧🇳","🇧🇴","🇧🇶","🇧🇷","🇧🇸","🇧🇹","🇧🇻","🇧🇼","🇧🇾","🇧🇿","🇨🇦","🇨🇨","🇨🇩","🇨🇫","🇨🇬","🇨🇭","🇨🇮","🇨🇰","🇨🇱","🇨🇲","🇨🇳","🇨🇴","🇨🇵","🇨🇷","🇨🇺","🇨🇻","🇨🇼","🇨🇽","🇨🇾","🇨🇿","🇩🇪","🇩🇬","🇩🇯","🇩🇰","🇩🇲","🇩🇴","🇩🇿","🇪🇦","🇪🇨","🇪🇪","🇪🇬","🇪🇭","🇪🇷","🇪🇸","🇪🇹","🇪🇺","🇫🇮","🇫🇯","🇫🇰","🇫🇲","🇫🇴","🇫🇷","🇬🇦","🇬🇧","🇬🇩","🇬🇪","🇬🇫","🇬🇬","🇬🇭","🇬🇮","🇬🇱","🇬🇲","🇬🇳","🇬🇵","🇬🇶","🇬🇷","🇬🇸","🇬🇹","🇬🇺","🇬🇼","🇬🇾","🇭🇰","🇭🇲","🇭🇳","🇭🇷","🇭🇹","🇭🇺","🇮🇨","🇮🇩","🇮🇪","🇮🇱","🇮🇲","🇮🇳","🇮🇴","🇮🇶","🇮🇷","🇮🇸","🇮🇹","🇯🇪","🇯🇲","🇯🇴","🇯🇵","🇰🇪","🇰🇬","🇰🇭","🇰🇮","🇰🇲","🇰🇳","🇰🇵","🇰🇷","🇰🇼","🇰🇾","🇰🇿","🇱🇦","🇱🇧","🇱🇨","🇱🇮","🇱🇰","🇱🇷","🇱🇸","🇱🇹","🇱🇺","🇱🇻","🇱🇾","🇲🇦","🇲🇨","🇲🇩","🇲🇪","🇲🇫","🇲🇬","🇲🇭","🇲🇰","🇲🇱","🇲🇲","🇲🇳","🇲🇴","🇲🇵","🇲🇶","🇲🇷","🇲🇸","🇲🇹","🇲🇺","🇲🇻","🇲🇼","🇲🇽","🇲🇾","🇲🇿","🇳🇦","🇳🇨","🇳🇪","🇳🇫","🇳🇬","🇳🇮","🇳🇱","🇳🇴","🇳🇵","🇳🇷","🇳🇺","🇳🇿","🇴🇲","🇵🇦","🇵🇪","🇵🇫","🇵🇬","🇵🇭","🇵🇰","🇵🇱","🇵🇲","🇵🇳","🇵🇷","🇵🇸","🇵🇹","🇵🇼","🇵🇾","🇶🇦","🇷🇪","🇷🇴","🇷🇸","🇷🇺","🇷🇼","🇸🇦","🇸🇧","🇸🇨","🇸🇩","🇸🇪","🇸🇬","🇸🇭","🇸🇮","🇸🇯","🇸🇰","🇸🇱","🇸🇲","🇸🇳","🇸🇴","🇸🇷","🇸🇸","🇸🇹","🇸🇻","🇸🇽","🇸🇾","🇸🇿","🇹🇦","🇹🇨","🇹🇩","🇹🇫","🇹🇬","🇹🇭","🇹🇯","🇹🇰","🇹🇱","🇹🇲","🇹🇳","🇹🇴","🇹🇷","🇹🇹","🇹🇻","🇹🇼","🇹🇿","🇺🇦","🇺🇬","🇺🇲","🇺🇳","🇺🇸","🇺🇾","🇺🇿","🇻🇦","🇻🇨","🇻🇪","🇻🇬","🇻🇮","🇻🇳","🇻🇺","🇼🇫","🇼🇸","🇽🇰","🇾🇪","🇾🇹","🇿🇦","🇿🇲","🇿🇼","🏴󠁧󠁢󠁥󠁮󠁧󠁿","🏴󠁧󠁢󠁳󠁣󠁴󠁿","🏴󠁧󠁢󠁷󠁬󠁳󠁿","☝🏻","☝🏼","☝🏽","☝🏾","☝🏿","⛹🏻","⛹🏼","⛹🏽","⛹🏾","⛹🏿","✊🏻","✊🏼","✊🏽","✊🏾","✊🏿","✋🏻","✋🏼","✋🏽","✋🏾","✋🏿","✌🏻","✌🏼","✌🏽","✌🏾","✌🏿","✍🏻","✍🏼","✍🏽","✍🏾","✍🏿","🎅🏻","🎅🏼","🎅🏽","🎅🏾","🎅🏿","🏂🏻","🏂🏼","🏂🏽","🏂🏾","🏂🏿","🏃🏻","🏃🏼","🏃🏽","🏃🏾","🏃🏿","🏄🏻","🏄🏼","🏄🏽","🏄🏾","🏄🏿","🏇🏻","🏇🏼","🏇🏽","🏇🏾","🏇🏿","🏊🏻","🏊🏼","🏊🏽","🏊🏾","🏊🏿","🏋🏻","🏋🏼","🏋🏽","🏋🏾","🏋🏿","🏌🏻","🏌🏼","🏌🏽","🏌🏾","🏌🏿","👂🏻","👂🏼","👂🏽","👂🏾","👂🏿","👃🏻","👃🏼","👃🏽","👃🏾","👃🏿","👆🏻","👆🏼","👆🏽","👆🏾","👆🏿","👇🏻","👇🏼","👇🏽","👇🏾","👇🏿","👈🏻","👈🏼","👈🏽","👈🏾","👈🏿","👉🏻","👉🏼","👉🏽","👉🏾","👉🏿","👊🏻","👊🏼","👊🏽","👊🏾","👊🏿","👋🏻","👋🏼","👋🏽","👋🏾","👋🏿","👌🏻","👌🏼","👌🏽","👌🏾","👌🏿","👍🏻","👍🏼","👍🏽","👍🏾","👍🏿","👎🏻","👎🏼","👎🏽","👎🏾","👎🏿","👏🏻","👏🏼","👏🏽","👏🏾","👏🏿","👐🏻","👐🏼","👐🏽","👐🏾","👐🏿","👦🏻","👦🏼","👦🏽","👦🏾","👦🏿","👧🏻","👧🏼","👧🏽","👧🏾","👧🏿","👨🏻","👨🏼","👨🏽","👨🏾","👨🏿","👩🏻","👩🏼","👩🏽","👩🏾","👩🏿","👫🏻","👫🏼","👫🏽","👫🏾","👫🏿","👬🏻","👬🏼","👬🏽","👬🏾","👬🏿","👭🏻","👭🏼","👭🏽","👭🏾","👭🏿","👮🏻","👮🏼","👮🏽","👮🏾","👮🏿","👰🏻","👰🏼","👰🏽","👰🏾","👰🏿","👱🏻","👱🏼","👱🏽","👱🏾","👱🏿","👲🏻","👲🏼","👲🏽","👲🏾","👲🏿","👳🏻","👳🏼","👳🏽","👳🏾","👳🏿","👴🏻","👴🏼","👴🏽","👴🏾","👴🏿","👵🏻","👵🏼","👵🏽","👵🏾","👵🏿","👶🏻","👶🏼","👶🏽","👶🏾","👶🏿","👷🏻","👷🏼","👷🏽","👷🏾","👷🏿","👸🏻","👸🏼","👸🏽","👸🏾","👸🏿","👼🏻","👼🏼","👼🏽","👼🏾","👼🏿","💁🏻","💁🏼","💁🏽","💁🏾","💁🏿","💂🏻","💂🏼","💂🏽","💂🏾","💂🏿","💃🏻","💃🏼","💃🏽","💃🏾","💃🏿","💅🏻","💅🏼","💅🏽","💅🏾","💅🏿","💆🏻","💆🏼","💆🏽","💆🏾","💆🏿","💇🏻","💇🏼","💇🏽","💇🏾","💇🏿","💏🏻","💏🏼","💏🏽","💏🏾","💏🏿","💑🏻","💑🏼","💑🏽","💑🏾","💑🏿","💪🏻","💪🏼","💪🏽","💪🏾","💪🏿","🕴🏻","🕴🏼","🕴🏽","🕴🏾","🕴🏿","🕵🏻","🕵🏼","🕵🏽","🕵🏾","🕵🏿","🕺🏻","🕺🏼","🕺🏽","🕺🏾","🕺🏿","🖐🏻","🖐🏼","🖐🏽","🖐🏾","🖐🏿","🖕🏻","🖕🏼","🖕🏽","🖕🏾","🖕🏿","🖖🏻","🖖🏼","🖖🏽","🖖🏾","🖖🏿","🙅🏻","🙅🏼","🙅🏽","🙅🏾","🙅🏿","🙆🏻","🙆🏼","🙆🏽","🙆🏾","🙆🏿","🙇🏻","🙇🏼","🙇🏽","🙇🏾","🙇🏿","🙋🏻","🙋🏼","🙋🏽","🙋🏾","🙋🏿","🙌🏻","🙌🏼","🙌🏽","🙌🏾","🙌🏿","🙍🏻","🙍🏼","🙍🏽","🙍🏾","🙍🏿","🙎🏻","🙎🏼","🙎🏽","🙎🏾","🙎🏿","🙏🏻","🙏🏼","🙏🏽","🙏🏾","🙏🏿","🚣🏻","🚣🏼","🚣🏽","🚣🏾","🚣🏿","🚴🏻","🚴🏼","🚴🏽","🚴🏾","🚴🏿","🚵🏻","🚵🏼","🚵🏽","🚵🏾","🚵🏿","🚶🏻","🚶🏼","🚶🏽","🚶🏾","🚶🏿","🛀🏻","🛀🏼","🛀🏽","🛀🏾","🛀🏿","🛌🏻","🛌🏼","🛌🏽","🛌🏾","🛌🏿","🤌🏻","🤌🏼","🤌🏽","🤌🏾","🤌🏿","🤏🏻","🤏🏼","🤏🏽","🤏🏾","🤏🏿","🤘🏻","🤘🏼","🤘🏽","🤘🏾","🤘🏿","🤙🏻","🤙🏼","🤙🏽","🤙🏾","🤙🏿","🤚🏻","🤚🏼","🤚🏽","🤚🏾","🤚🏿","🤛🏻","🤛🏼","🤛🏽","🤛🏾","🤛🏿","🤜🏻","🤜🏼","🤜🏽","🤜🏾","🤜🏿","🤝🏻","🤝🏼","🤝🏽","🤝🏾","🤝🏿","🤞🏻","🤞🏼","🤞🏽","🤞🏾","🤞🏿","🤟🏻","🤟🏼","🤟🏽","🤟🏾","🤟🏿","🤦🏻","🤦🏼","🤦🏽","🤦🏾","🤦🏿","🤰🏻","🤰🏼","🤰🏽","🤰🏾","🤰🏿","🤱🏻","🤱🏼","🤱🏽","🤱🏾","🤱🏿","🤲🏻","🤲🏼","🤲🏽","🤲🏾","🤲🏿","🤳🏻","🤳🏼","🤳🏽","🤳🏾","🤳🏿","🤴🏻","🤴🏼","🤴🏽","🤴🏾","🤴🏿","🤵🏻","🤵🏼","🤵🏽","🤵🏾","🤵🏿","🤶🏻","🤶🏼","🤶🏽","🤶🏾","🤶🏿","🤷🏻","🤷🏼","🤷🏽","🤷🏾","🤷🏿","🤸🏻","🤸🏼","🤸🏽","🤸🏾","🤸🏿","🤹🏻","🤹🏼","🤹🏽","🤹🏾","🤹🏿","🤽🏻","🤽🏼","🤽🏽","🤽🏾","🤽🏿","🤾🏻","🤾🏼","🤾🏽","🤾🏾","🤾🏿","🥷🏻","🥷🏼","🥷🏽","🥷🏾","🥷🏿","🦵🏻","🦵🏼","🦵🏽","🦵🏾","🦵🏿","🦶🏻","🦶🏼","🦶🏽","🦶🏾","🦶🏿","🦸🏻","🦸🏼","🦸🏽","🦸🏾","🦸🏿","🦹🏻","🦹🏼","🦹🏽","🦹🏾","🦹🏿","🦻🏻","🦻🏼","🦻🏽","🦻🏾","🦻🏿","🧍🏻","🧍🏼","🧍🏽","🧍🏾","🧍🏿","🧎🏻","🧎🏼","🧎🏽","🧎🏾","🧎🏿","🧏🏻","🧏🏼","🧏🏽","🧏🏾","🧏🏿","🧑🏻","🧑🏼","🧑🏽","🧑🏾","🧑🏿","🧒🏻","🧒🏼","🧒🏽","🧒🏾","🧒🏿","🧓🏻","🧓🏼","🧓🏽","🧓🏾","🧓🏿","🧔🏻","🧔🏼","🧔🏽","🧔🏾","🧔🏿","🧕🏻","🧕🏼","🧕🏽","🧕🏾","🧕🏿","🧖🏻","🧖🏼","🧖🏽","🧖🏾","🧖🏿","🧗🏻","🧗🏼","🧗🏽","🧗🏾","🧗🏿","🧘🏻","🧘🏼","🧘🏽","🧘🏾","🧘🏿","🧙🏻","🧙🏼","🧙🏽","🧙🏾","🧙🏿","🧚🏻","🧚🏼","🧚🏽","🧚🏾","🧚🏿","🧛🏻","🧛🏼","🧛🏽","🧛🏾","🧛🏿","🧜🏻","🧜🏼","🧜🏽","🧜🏾","🧜🏿","🧝🏻","🧝🏼","🧝🏽","🧝🏾","🧝🏿","🫃🏻","🫃🏼","🫃🏽","🫃🏾","🫃🏿","🫄🏻","🫄🏼","🫄🏽","🫄🏾","🫄🏿","🫅🏻","🫅🏼","🫅🏽","🫅🏾","🫅🏿","🫰🏻","🫰🏼","🫰🏽","🫰🏾","🫰🏿","🫱🏻","🫱🏼","🫱🏽","🫱🏾","🫱🏿","🫲🏻","🫲🏼","🫲🏽","🫲🏾","🫲🏿","🫳🏻","🫳🏼","🫳🏽","🫳🏾","🫳🏿","🫴🏻","🫴🏼","🫴🏽","🫴🏾","🫴🏿","🫵🏻","🫵🏼","🫵🏽","🫵🏾","🫵🏿","🫶🏻","🫶🏼","🫶🏽","🫶🏾","🫶🏿","🫷🏻","🫷🏼","🫷🏽","🫷🏾","🫷🏿","🫸🏻","🫸🏼","🫸🏽","🫸🏾","🫸🏿","👨‍❤️‍👨","👨‍❤️‍💋‍👨","👨‍👦","👨‍👦‍👦","👨‍👧","👨‍👧‍👦","👨‍👧‍👧","👨‍👨‍👦","👨‍👨‍👦‍👦","👨‍👨‍👧","👨‍👨‍👧‍👦","👨‍👨‍👧‍👧","👨‍👩‍👦","👨‍👩‍👦‍👦","👨‍👩‍👧","👨‍👩‍👧‍👦","👨‍👩‍👧‍👧","👨🏻‍❤️‍👨🏻","👨🏻‍❤️‍👨🏼","👨🏻‍❤️‍👨🏽","👨🏻‍❤️‍👨🏾","👨🏻‍❤️‍👨🏿","👨🏻‍❤️‍💋‍👨🏻","👨🏻‍❤️‍💋‍👨🏼","👨🏻‍❤️‍💋‍👨🏽","👨🏻‍❤️‍💋‍👨🏾","👨🏻‍❤️‍💋‍👨🏿","👨🏻‍🤝‍👨🏼","👨🏻‍🤝‍👨🏽","👨🏻‍🤝‍👨🏾","👨🏻‍🤝‍👨🏿","👨🏼‍❤️‍👨🏻","👨🏼‍❤️‍👨🏼","👨🏼‍❤️‍👨🏽","👨🏼‍❤️‍👨🏾","👨🏼‍❤️‍👨🏿","👨🏼‍❤️‍💋‍👨🏻","👨🏼‍❤️‍💋‍👨🏼","👨🏼‍❤️‍💋‍👨🏽","👨🏼‍❤️‍💋‍👨🏾","👨🏼‍❤️‍💋‍👨🏿","👨🏼‍🤝‍👨🏻","👨🏼‍🤝‍👨🏽","👨🏼‍🤝‍👨🏾","👨🏼‍🤝‍👨🏿","👨🏽‍❤️‍👨🏻","👨🏽‍❤️‍👨🏼","👨🏽‍❤️‍👨🏽","👨🏽‍❤️‍👨🏾","👨🏽‍❤️‍👨🏿","👨🏽‍❤️‍💋‍👨🏻","👨🏽‍❤️‍💋‍👨🏼","👨🏽‍❤️‍💋‍👨🏽","👨🏽‍❤️‍💋‍👨🏾","👨🏽‍❤️‍💋‍👨🏿","👨🏽‍🤝‍👨🏻","👨🏽‍🤝‍👨🏼","👨🏽‍🤝‍👨🏾","👨🏽‍🤝‍👨🏿","👨🏾‍❤️‍👨🏻","👨🏾‍❤️‍👨🏼","👨🏾‍❤️‍👨🏽","👨🏾‍❤️‍👨🏾","👨🏾‍❤️‍👨🏿","👨🏾‍❤️‍💋‍👨🏻","👨🏾‍❤️‍💋‍👨🏼","👨🏾‍❤️‍💋‍👨🏽","👨🏾‍❤️‍💋‍👨🏾","👨🏾‍❤️‍💋‍👨🏿","👨🏾‍🤝‍👨🏻","👨🏾‍🤝‍👨🏼","👨🏾‍🤝‍👨🏽","👨🏾‍🤝‍👨🏿","👨🏿‍❤️‍👨🏻","👨🏿‍❤️‍👨🏼","👨🏿‍❤️‍👨🏽","👨🏿‍❤️‍👨🏾","👨🏿‍❤️‍👨🏿","👨🏿‍❤️‍💋‍👨🏻","👨🏿‍❤️‍💋‍👨🏼","👨🏿‍❤️‍💋‍👨🏽","👨🏿‍❤️‍💋‍👨🏾","👨🏿‍❤️‍💋‍👨🏿","👨🏿‍🤝‍👨🏻","👨🏿‍🤝‍👨🏼","👨🏿‍🤝‍👨🏽","👨🏿‍🤝‍👨🏾","👩‍❤️‍👨","👩‍❤️‍👩","👩‍❤️‍💋‍👨","👩‍❤️‍💋‍👩","👩‍👦","👩‍👦‍👦","👩‍👧","👩‍👧‍👦","👩‍👧‍👧","👩‍👩‍👦","👩‍👩‍👦‍👦","👩‍👩‍👧","👩‍👩‍👧‍👦","👩‍👩‍👧‍👧","👩🏻‍❤️‍👨🏻","👩🏻‍❤️‍👨🏼","👩🏻‍❤️‍👨🏽","👩🏻‍❤️‍👨🏾","👩🏻‍❤️‍👨🏿","👩🏻‍❤️‍👩🏻","👩🏻‍❤️‍👩🏼","👩🏻‍❤️‍👩🏽","👩🏻‍❤️‍👩🏾","👩🏻‍❤️‍👩🏿","👩🏻‍❤️‍💋‍👨🏻","👩🏻‍❤️‍💋‍👨🏼","👩🏻‍❤️‍💋‍👨🏽","👩🏻‍❤️‍💋‍👨🏾","👩🏻‍❤️‍💋‍👨🏿","👩🏻‍❤️‍💋‍👩🏻","👩🏻‍❤️‍💋‍👩🏼","👩🏻‍❤️‍💋‍👩🏽","👩🏻‍❤️‍💋‍👩🏾","👩🏻‍❤️‍💋‍👩🏿","👩🏻‍🤝‍👨🏼","👩🏻‍🤝‍👨🏽","👩🏻‍🤝‍👨🏾","👩🏻‍🤝‍👨🏿","👩🏻‍🤝‍👩🏼","👩🏻‍🤝‍👩🏽","👩🏻‍🤝‍👩🏾","👩🏻‍🤝‍👩🏿","👩🏼‍❤️‍👨🏻","👩🏼‍❤️‍👨🏼","👩🏼‍❤️‍👨🏽","👩🏼‍❤️‍👨🏾","👩🏼‍❤️‍👨🏿","👩🏼‍❤️‍👩🏻","👩🏼‍❤️‍👩🏼","👩🏼‍❤️‍👩🏽","👩🏼‍❤️‍👩🏾","👩🏼‍❤️‍👩🏿","👩🏼‍❤️‍💋‍👨🏻","👩🏼‍❤️‍💋‍👨🏼","👩🏼‍❤️‍💋‍👨🏽","👩🏼‍❤️‍💋‍👨🏾","👩🏼‍❤️‍💋‍👨🏿","👩🏼‍❤️‍💋‍👩🏻","👩🏼‍❤️‍💋‍👩🏼","👩🏼‍❤️‍💋‍👩🏽","👩🏼‍❤️‍💋‍👩🏾","👩🏼‍❤️‍💋‍👩🏿","👩🏼‍🤝‍👨🏻","👩🏼‍🤝‍👨🏽","👩🏼‍🤝‍👨🏾","👩🏼‍🤝‍👨🏿","👩🏼‍🤝‍👩🏻","👩🏼‍🤝‍👩🏽","👩🏼‍🤝‍👩🏾","👩🏼‍🤝‍👩🏿","👩🏽‍❤️‍👨🏻","👩🏽‍❤️‍👨🏼","👩🏽‍❤️‍👨🏽","👩🏽‍❤️‍👨🏾","👩🏽‍❤️‍👨🏿","👩🏽‍❤️‍👩🏻","👩🏽‍❤️‍👩🏼","👩🏽‍❤️‍👩🏽","👩🏽‍❤️‍👩🏾","👩🏽‍❤️‍👩🏿","👩🏽‍❤️‍💋‍👨🏻","👩🏽‍❤️‍💋‍👨🏼","👩🏽‍❤️‍💋‍👨🏽","👩🏽‍❤️‍💋‍👨🏾","👩🏽‍❤️‍💋‍👨🏿","👩🏽‍❤️‍💋‍👩🏻","👩🏽‍❤️‍💋‍👩🏼","👩🏽‍❤️‍💋‍👩🏽","👩🏽‍❤️‍💋‍👩🏾","👩🏽‍❤️‍💋‍👩🏿","👩🏽‍🤝‍👨🏻","👩🏽‍🤝‍👨🏼","👩🏽‍🤝‍👨🏾","👩🏽‍🤝‍👨🏿","👩🏽‍🤝‍👩🏻","👩🏽‍🤝‍👩🏼","👩🏽‍🤝‍👩🏾","👩🏽‍🤝‍👩🏿","👩🏾‍❤️‍👨🏻","👩🏾‍❤️‍👨🏼","👩🏾‍❤️‍👨🏽","👩🏾‍❤️‍👨🏾","👩🏾‍❤️‍👨🏿","👩🏾‍❤️‍👩🏻","👩🏾‍❤️‍👩🏼","👩🏾‍❤️‍👩🏽","👩🏾‍❤️‍👩🏾","👩🏾‍❤️‍👩🏿","👩🏾‍❤️‍💋‍👨🏻","👩🏾‍❤️‍💋‍👨🏼","👩🏾‍❤️‍💋‍👨🏽","👩🏾‍❤️‍💋‍👨🏾","👩🏾‍❤️‍💋‍👨🏿","👩🏾‍❤️‍💋‍👩🏻","👩🏾‍❤️‍💋‍👩🏼","👩🏾‍❤️‍💋‍👩🏽","👩🏾‍❤️‍💋‍👩🏾","👩🏾‍❤️‍💋‍👩🏿","👩🏾‍🤝‍👨🏻","👩🏾‍🤝‍👨🏼","👩🏾‍🤝‍👨🏽","👩🏾‍🤝‍👨🏿","👩🏾‍🤝‍👩🏻","👩🏾‍🤝‍👩🏼","👩🏾‍🤝‍👩🏽","👩🏾‍🤝‍👩🏿","👩🏿‍❤️‍👨🏻","👩🏿‍❤️‍👨🏼","👩🏿‍❤️‍👨🏽","👩🏿‍❤️‍👨🏾","👩🏿‍❤️‍👨🏿","👩🏿‍❤️‍👩🏻","👩🏿‍❤️‍👩🏼","👩🏿‍❤️‍👩🏽","👩🏿‍❤️‍👩🏾","👩🏿‍❤️‍👩🏿","👩🏿‍❤️‍💋‍👨🏻","👩🏿‍❤️‍💋‍👨🏼","👩🏿‍❤️‍💋‍👨🏽","👩🏿‍❤️‍💋‍👨🏾","👩🏿‍❤️‍💋‍👨🏿","👩🏿‍❤️‍💋‍👩🏻","👩🏿‍❤️‍💋‍👩🏼","👩🏿‍❤️‍💋‍👩🏽","👩🏿‍❤️‍💋‍👩🏾","👩🏿‍❤️‍💋‍👩🏿","👩🏿‍🤝‍👨🏻","👩🏿‍🤝‍👨🏼","👩🏿‍🤝‍👨🏽","👩🏿‍🤝‍👨🏾","👩🏿‍🤝‍👩🏻","👩🏿‍🤝‍👩🏼","👩🏿‍🤝‍👩🏽","👩🏿‍🤝‍👩🏾","🧑‍🤝‍🧑","🧑🏻‍❤️‍💋‍🧑🏼","🧑🏻‍❤️‍💋‍🧑🏽","🧑🏻‍❤️‍💋‍🧑🏾","🧑🏻‍❤️‍💋‍🧑🏿","🧑🏻‍❤️‍🧑🏼","🧑🏻‍❤️‍🧑🏽","🧑🏻‍❤️‍🧑🏾","🧑🏻‍❤️‍🧑🏿","🧑🏻‍🎄","🧑🏻‍🤝‍🧑🏻","🧑🏻‍🤝‍🧑🏼","🧑🏻‍🤝‍🧑🏽","🧑🏻‍🤝‍🧑🏾","🧑🏻‍🤝‍🧑🏿","🧑🏼‍❤️‍💋‍🧑🏻","🧑🏼‍❤️‍💋‍🧑🏽","🧑🏼‍❤️‍💋‍🧑🏾","🧑🏼‍❤️‍💋‍🧑🏿","🧑🏼‍❤️‍🧑🏻","🧑🏼‍❤️‍🧑🏽","🧑🏼‍❤️‍🧑🏾","🧑🏼‍❤️‍🧑🏿","🧑🏼‍🎄","🧑🏼‍🤝‍🧑🏻","🧑🏼‍🤝‍🧑🏼","🧑🏼‍🤝‍🧑🏽","🧑🏼‍🤝‍🧑🏾","🧑🏼‍🤝‍🧑🏿","🧑🏽‍❤️‍💋‍🧑🏻","🧑🏽‍❤️‍💋‍🧑🏼","🧑🏽‍❤️‍💋‍🧑🏾","🧑🏽‍❤️‍💋‍🧑🏿","🧑🏽‍❤️‍🧑🏻","🧑🏽‍❤️‍🧑🏼","🧑🏽‍❤️‍🧑🏾","🧑🏽‍❤️‍🧑🏿","🧑🏽‍🎄","🧑🏽‍🤝‍🧑🏻","🧑🏽‍🤝‍🧑🏼","🧑🏽‍🤝‍🧑🏽","🧑🏽‍🤝‍🧑🏾","🧑🏽‍🤝‍🧑🏿","🧑🏾‍❤️‍💋‍🧑🏻","🧑🏾‍❤️‍💋‍🧑🏼","🧑🏾‍❤️‍💋‍🧑🏽","🧑🏾‍❤️‍💋‍🧑🏿","🧑🏾‍❤️‍🧑🏻","🧑🏾‍❤️‍🧑🏼","🧑🏾‍❤️‍🧑🏽","🧑🏾‍❤️‍🧑🏿","🧑🏾‍🎄","🧑🏾‍🤝‍🧑🏻","🧑🏾‍🤝‍🧑🏼","🧑🏾‍🤝‍🧑🏽","🧑🏾‍🤝‍🧑🏾","🧑🏾‍🤝‍🧑🏿","🧑🏿‍❤️‍💋‍🧑🏻","🧑🏿‍❤️‍💋‍🧑🏼","🧑🏿‍❤️‍💋‍🧑🏽","🧑🏿‍❤️‍💋‍🧑🏾","🧑🏿‍❤️‍🧑🏻","🧑🏿‍❤️‍🧑🏼","🧑🏿‍❤️‍🧑🏽","🧑🏿‍❤️‍🧑🏾","🧑🏿‍🎄","🧑🏿‍🤝‍🧑🏻","🧑🏿‍🤝‍🧑🏼","🧑🏿‍🤝‍🧑🏽","🧑🏿‍🤝‍🧑🏾","🧑🏿‍🤝‍🧑🏿","🫱🏻‍🫲🏼","🫱🏻‍🫲🏽","🫱🏻‍🫲🏾","🫱🏻‍🫲🏿","🫱🏼‍🫲🏻","🫱🏼‍🫲🏽","🫱🏼‍🫲🏾","🫱🏼‍🫲🏿","🫱🏽‍🫲🏻","🫱🏽‍🫲🏼","🫱🏽‍🫲🏾","🫱🏽‍🫲🏿","🫱🏾‍🫲🏻","🫱🏾‍🫲🏼","🫱🏾‍🫲🏽","🫱🏾‍🫲🏿","🫱🏿‍🫲🏻","🫱🏿‍🫲🏼","🫱🏿‍🫲🏽","🫱🏿‍🫲🏾","👨‍⚕️","👨‍⚖️","👨‍✈️","👨‍🌾","👨‍🍳","👨‍🍼","👨‍🎓","👨‍🎤","👨‍🎨","👨‍🏫","👨‍🏭","👨‍💻","👨‍💼","👨‍🔧","👨‍🔬","👨‍🚀","👨‍🚒","👨‍🦯","👨‍🦼","👨‍🦽","👨🏻‍⚕️","👨🏻‍⚖️","👨🏻‍✈️","👨🏻‍🌾","👨🏻‍🍳","👨🏻‍🍼","👨🏻‍🎓","👨🏻‍🎤","👨🏻‍🎨","👨🏻‍🏫","👨🏻‍🏭","👨🏻‍💻","👨🏻‍💼","👨🏻‍🔧","👨🏻‍🔬","👨🏻‍🚀","👨🏻‍🚒","👨🏻‍🦯","👨🏻‍🦼","👨🏻‍🦽","👨🏼‍⚕️","👨🏼‍⚖️","👨🏼‍✈️","👨🏼‍🌾","👨🏼‍🍳","👨🏼‍🍼","👨🏼‍🎓","👨🏼‍🎤","👨🏼‍🎨","👨🏼‍🏫","👨🏼‍🏭","👨🏼‍💻","👨🏼‍💼","👨🏼‍🔧","👨🏼‍🔬","👨🏼‍🚀","👨🏼‍🚒","👨🏼‍🦯","👨🏼‍🦼","👨🏼‍🦽","👨🏽‍⚕️","👨🏽‍⚖️","👨🏽‍✈️","👨🏽‍🌾","👨🏽‍🍳","👨🏽‍🍼","👨🏽‍🎓","👨🏽‍🎤","👨🏽‍🎨","👨🏽‍🏫","👨🏽‍🏭","👨🏽‍💻","👨🏽‍💼","👨🏽‍🔧","👨🏽‍🔬","👨🏽‍🚀","👨🏽‍🚒","👨🏽‍🦯","👨🏽‍🦼","👨🏽‍🦽","👨🏾‍⚕️","👨🏾‍⚖️","👨🏾‍✈️","👨🏾‍🌾","👨🏾‍🍳","👨🏾‍🍼","👨🏾‍🎓","👨🏾‍🎤","👨🏾‍🎨","👨🏾‍🏫","👨🏾‍🏭","👨🏾‍💻","👨🏾‍💼","👨🏾‍🔧","👨🏾‍🔬","👨🏾‍🚀","👨🏾‍🚒","👨🏾‍🦯","👨🏾‍🦼","👨🏾‍🦽","👨🏿‍⚕️","👨🏿‍⚖️","👨🏿‍✈️","👨🏿‍🌾","👨🏿‍🍳","👨🏿‍🍼","👨🏿‍🎓","👨🏿‍🎤","👨🏿‍🎨","👨🏿‍🏫","👨🏿‍🏭","👨🏿‍💻","👨🏿‍💼","👨🏿‍🔧","👨🏿‍🔬","👨🏿‍🚀","👨🏿‍🚒","👨🏿‍🦯","👨🏿‍🦼","👨🏿‍🦽","👩‍⚕️","👩‍⚖️","👩‍✈️","👩‍🌾","👩‍🍳","👩‍🍼","👩‍🎓","👩‍🎤","👩‍🎨","👩‍🏫","👩‍🏭","👩‍💻","👩‍💼","👩‍🔧","👩‍🔬","👩‍🚀","👩‍🚒","👩‍🦯","👩‍🦼","👩‍🦽","👩🏻‍⚕️","👩🏻‍⚖️","👩🏻‍✈️","👩🏻‍🌾","👩🏻‍🍳","👩🏻‍🍼","👩🏻‍🎓","👩🏻‍🎤","👩🏻‍🎨","👩🏻‍🏫","👩🏻‍🏭","👩🏻‍💻","👩🏻‍💼","👩🏻‍🔧","👩🏻‍🔬","👩🏻‍🚀","👩🏻‍🚒","👩🏻‍🦯","👩🏻‍🦼","👩🏻‍🦽","👩🏼‍⚕️","👩🏼‍⚖️","👩🏼‍✈️","👩🏼‍🌾","👩🏼‍🍳","👩🏼‍🍼","👩🏼‍🎓","👩🏼‍🎤","👩🏼‍🎨","👩🏼‍🏫","👩🏼‍🏭","👩🏼‍💻","👩🏼‍💼","👩🏼‍🔧","👩🏼‍🔬","👩🏼‍🚀","👩🏼‍🚒","👩🏼‍🦯","👩🏼‍🦼","👩🏼‍🦽","👩🏽‍⚕️","👩🏽‍⚖️","👩🏽‍✈️","👩🏽‍🌾","👩🏽‍🍳","👩🏽‍🍼","👩🏽‍🎓","👩🏽‍🎤","👩🏽‍🎨","👩🏽‍🏫","👩🏽‍🏭","👩🏽‍💻","👩🏽‍💼","👩🏽‍🔧","👩🏽‍🔬","👩🏽‍🚀","👩🏽‍🚒","👩🏽‍🦯","👩🏽‍🦼","👩🏽‍🦽","👩🏾‍⚕️","👩🏾‍⚖️","👩🏾‍✈️","👩🏾‍🌾","👩🏾‍🍳","👩🏾‍🍼","👩🏾‍🎓","👩🏾‍🎤","👩🏾‍🎨","👩🏾‍🏫","👩🏾‍🏭","👩🏾‍💻","👩🏾‍💼","👩🏾‍🔧","👩🏾‍🔬","👩🏾‍🚀","👩🏾‍🚒","👩🏾‍🦯","👩🏾‍🦼","👩🏾‍🦽","👩🏿‍⚕️","👩🏿‍⚖️","👩🏿‍✈️","👩🏿‍🌾","👩🏿‍🍳","👩🏿‍🍼","👩🏿‍🎓","👩🏿‍🎤","👩🏿‍🎨","👩🏿‍🏫","👩🏿‍🏭","👩🏿‍💻","👩🏿‍💼","👩🏿‍🔧","👩🏿‍🔬","👩🏿‍🚀","👩🏿‍🚒","👩🏿‍🦯","👩🏿‍🦼","👩🏿‍🦽","🧑‍⚕️","🧑‍⚖️","🧑‍✈️","🧑‍🌾","🧑‍🍳","🧑‍🍼","🧑‍🎓","🧑‍🎤","🧑‍🎨","🧑‍🏫","🧑‍🏭","🧑‍💻","🧑‍💼","🧑‍🔧","🧑‍🔬","🧑‍🚀","🧑‍🚒","🧑‍🦯","🧑‍🦼","🧑‍🦽","🧑🏻‍⚕️","🧑🏻‍⚖️","🧑🏻‍✈️","🧑🏻‍🌾","🧑🏻‍🍳","🧑🏻‍🍼","🧑🏻‍🎓","🧑🏻‍🎤","🧑🏻‍🎨","🧑🏻‍🏫","🧑🏻‍🏭","🧑🏻‍💻","🧑🏻‍💼","🧑🏻‍🔧","🧑🏻‍🔬","🧑🏻‍🚀","🧑🏻‍🚒","🧑🏻‍🦯","🧑🏻‍🦼","🧑🏻‍🦽","🧑🏼‍⚕️","🧑🏼‍⚖️","🧑🏼‍✈️","🧑🏼‍🌾","🧑🏼‍🍳","🧑🏼‍🍼","🧑🏼‍🎓","🧑🏼‍🎤","🧑🏼‍🎨","🧑🏼‍🏫","🧑🏼‍🏭","🧑🏼‍💻","🧑🏼‍💼","🧑🏼‍🔧","🧑🏼‍🔬","🧑🏼‍🚀","🧑🏼‍🚒","🧑🏼‍🦯","🧑🏼‍🦼","🧑🏼‍🦽","🧑🏽‍⚕️","🧑🏽‍⚖️","🧑🏽‍✈️","🧑🏽‍🌾","🧑🏽‍🍳","🧑🏽‍🍼","🧑🏽‍🎓","🧑🏽‍🎤","🧑🏽‍🎨","🧑🏽‍🏫","🧑🏽‍🏭","🧑🏽‍💻","🧑🏽‍💼","🧑🏽‍🔧","🧑🏽‍🔬","🧑🏽‍🚀","🧑🏽‍🚒","🧑🏽‍🦯","🧑🏽‍🦼","🧑🏽‍🦽","🧑🏾‍⚕️","🧑🏾‍⚖️","🧑🏾‍✈️","🧑🏾‍🌾","🧑🏾‍🍳","🧑🏾‍🍼","🧑🏾‍🎓","🧑🏾‍🎤","🧑🏾‍🎨","🧑🏾‍🏫","🧑🏾‍🏭","🧑🏾‍💻","🧑🏾‍💼","🧑🏾‍🔧","🧑🏾‍🔬","🧑🏾‍🚀","🧑🏾‍🚒","🧑🏾‍🦯","🧑🏾‍🦼","🧑🏾‍🦽","🧑🏿‍⚕️","🧑🏿‍⚖️","🧑🏿‍✈️","🧑🏿‍🌾","🧑🏿‍🍳","🧑🏿‍🍼","🧑🏿‍🎓","🧑🏿‍🎤","🧑🏿‍🎨","🧑🏿‍🏫","🧑🏿‍🏭","🧑🏿‍💻","🧑🏿‍💼","🧑🏿‍🔧","🧑🏿‍🔬","🧑🏿‍🚀","🧑🏿‍🚒","🧑🏿‍🦯","🧑🏿‍🦼","🧑🏿‍🦽","⛹🏻‍♀️","⛹🏻‍♂️","⛹🏼‍♀️","⛹🏼‍♂️","⛹🏽‍♀️","⛹🏽‍♂️","⛹🏾‍♀️","⛹🏾‍♂️","⛹🏿‍♀️","⛹🏿‍♂️","⛹️‍♀️","⛹️‍♂️","🏃‍♀️","🏃‍♂️","🏃🏻‍♀️","🏃🏻‍♂️","🏃🏼‍♀️","🏃🏼‍♂️","🏃🏽‍♀️","🏃🏽‍♂️","🏃🏾‍♀️","🏃🏾‍♂️","🏃🏿‍♀️","🏃🏿‍♂️","🏄‍♀️","🏄‍♂️","🏄🏻‍♀️","🏄🏻‍♂️","🏄🏼‍♀️","🏄🏼‍♂️","🏄🏽‍♀️","🏄🏽‍♂️","🏄🏾‍♀️","🏄🏾‍♂️","🏄🏿‍♀️","🏄🏿‍♂️","🏊‍♀️","🏊‍♂️","🏊🏻‍♀️","🏊🏻‍♂️","🏊🏼‍♀️","🏊🏼‍♂️","🏊🏽‍♀️","🏊🏽‍♂️","🏊🏾‍♀️","🏊🏾‍♂️","🏊🏿‍♀️","🏊🏿‍♂️","🏋🏻‍♀️","🏋🏻‍♂️","🏋🏼‍♀️","🏋🏼‍♂️","🏋🏽‍♀️","🏋🏽‍♂️","🏋🏾‍♀️","🏋🏾‍♂️","🏋🏿‍♀️","🏋🏿‍♂️","🏋️‍♀️","🏋️‍♂️","🏌🏻‍♀️","🏌🏻‍♂️","🏌🏼‍♀️","🏌🏼‍♂️","🏌🏽‍♀️","🏌🏽‍♂️","🏌🏾‍♀️","🏌🏾‍♂️","🏌🏿‍♀️","🏌🏿‍♂️","🏌️‍♀️","🏌️‍♂️","👮‍♀️","👮‍♂️","👮🏻‍♀️","👮🏻‍♂️","👮🏼‍♀️","👮🏼‍♂️","👮🏽‍♀️","👮🏽‍♂️","👮🏾‍♀️","👮🏾‍♂️","👮🏿‍♀️","👮🏿‍♂️","👯‍♀️","👯‍♂️","👰‍♀️","👰‍♂️","👰🏻‍♀️","👰🏻‍♂️","👰🏼‍♀️","👰🏼‍♂️","👰🏽‍♀️","👰🏽‍♂️","👰🏾‍♀️","👰🏾‍♂️","👰🏿‍♀️","👰🏿‍♂️","👱‍♀️","👱‍♂️","👱🏻‍♀️","👱🏻‍♂️","👱🏼‍♀️","👱🏼‍♂️","👱🏽‍♀️","👱🏽‍♂️","👱🏾‍♀️","👱🏾‍♂️","👱🏿‍♀️","👱🏿‍♂️","👳‍♀️","👳‍♂️","👳🏻‍♀️","👳🏻‍♂️","👳🏼‍♀️","👳🏼‍♂️","👳🏽‍♀️","👳🏽‍♂️","👳🏾‍♀️","👳🏾‍♂️","👳🏿‍♀️","👳🏿‍♂️","👷‍♀️","👷‍♂️","👷🏻‍♀️","👷🏻‍♂️","👷🏼‍♀️","👷🏼‍♂️","👷🏽‍♀️","👷🏽‍♂️","👷🏾‍♀️","👷🏾‍♂️","👷🏿‍♀️","👷🏿‍♂️","💁‍♀️","💁‍♂️","💁🏻‍♀️","💁🏻‍♂️","💁🏼‍♀️","💁🏼‍♂️","💁🏽‍♀️","💁🏽‍♂️","💁🏾‍♀️","💁🏾‍♂️","💁🏿‍♀️","💁🏿‍♂️","💂‍♀️","💂‍♂️","💂🏻‍♀️","💂🏻‍♂️","💂🏼‍♀️","💂🏼‍♂️","💂🏽‍♀️","💂🏽‍♂️","💂🏾‍♀️","💂🏾‍♂️","💂🏿‍♀️","💂🏿‍♂️","💆‍♀️","💆‍♂️","💆🏻‍♀️","💆🏻‍♂️","💆🏼‍♀️","💆🏼‍♂️","💆🏽‍♀️","💆🏽‍♂️","💆🏾‍♀️","💆🏾‍♂️","💆🏿‍♀️","💆🏿‍♂️","💇‍♀️","💇‍♂️","💇🏻‍♀️","💇🏻‍♂️","💇🏼‍♀️","💇🏼‍♂️","💇🏽‍♀️","💇🏽‍♂️","💇🏾‍♀️","💇🏾‍♂️","💇🏿‍♀️","💇🏿‍♂️","🕵🏻‍♀️","🕵🏻‍♂️","🕵🏼‍♀️","🕵🏼‍♂️","🕵🏽‍♀️","🕵🏽‍♂️","🕵🏾‍♀️","🕵🏾‍♂️","🕵🏿‍♀️","🕵🏿‍♂️","🕵️‍♀️","🕵️‍♂️","🙅‍♀️","🙅‍♂️","🙅🏻‍♀️","🙅🏻‍♂️","🙅🏼‍♀️","🙅🏼‍♂️","🙅🏽‍♀️","🙅🏽‍♂️","🙅🏾‍♀️","🙅🏾‍♂️","🙅🏿‍♀️","🙅🏿‍♂️","🙆‍♀️","🙆‍♂️","🙆🏻‍♀️","🙆🏻‍♂️","🙆🏼‍♀️","🙆🏼‍♂️","🙆🏽‍♀️","🙆🏽‍♂️","🙆🏾‍♀️","🙆🏾‍♂️","🙆🏿‍♀️","🙆🏿‍♂️","🙇‍♀️","🙇‍♂️","🙇🏻‍♀️","🙇🏻‍♂️","🙇🏼‍♀️","🙇🏼‍♂️","🙇🏽‍♀️","🙇🏽‍♂️","🙇🏾‍♀️","🙇🏾‍♂️","🙇🏿‍♀️","🙇🏿‍♂️","🙋‍♀️","🙋‍♂️","🙋🏻‍♀️","🙋🏻‍♂️","🙋🏼‍♀️","🙋🏼‍♂️","🙋🏽‍♀️","🙋🏽‍♂️","🙋🏾‍♀️","🙋🏾‍♂️","🙋🏿‍♀️","🙋🏿‍♂️","🙍‍♀️","🙍‍♂️","🙍🏻‍♀️","🙍🏻‍♂️","🙍🏼‍♀️","🙍🏼‍♂️","🙍🏽‍♀️","🙍🏽‍♂️","🙍🏾‍♀️","🙍🏾‍♂️","🙍🏿‍♀️","🙍🏿‍♂️","🙎‍♀️","🙎‍♂️","🙎🏻‍♀️","🙎🏻‍♂️","🙎🏼‍♀️","🙎🏼‍♂️","🙎🏽‍♀️","🙎🏽‍♂️","🙎🏾‍♀️","🙎🏾‍♂️","🙎🏿‍♀️","🙎🏿‍♂️","🚣‍♀️","🚣‍♂️","🚣🏻‍♀️","🚣🏻‍♂️","🚣🏼‍♀️","🚣🏼‍♂️","🚣🏽‍♀️","🚣🏽‍♂️","🚣🏾‍♀️","🚣🏾‍♂️","🚣🏿‍♀️","🚣🏿‍♂️","🚴‍♀️","🚴‍♂️","🚴🏻‍♀️","🚴🏻‍♂️","🚴🏼‍♀️","🚴🏼‍♂️","🚴🏽‍♀️","🚴🏽‍♂️","🚴🏾‍♀️","🚴🏾‍♂️","🚴🏿‍♀️","🚴🏿‍♂️","🚵‍♀️","🚵‍♂️","🚵🏻‍♀️","🚵🏻‍♂️","🚵🏼‍♀️","🚵🏼‍♂️","🚵🏽‍♀️","🚵🏽‍♂️","🚵🏾‍♀️","🚵🏾‍♂️","🚵🏿‍♀️","🚵🏿‍♂️","🚶‍♀️","🚶‍♂️","🚶🏻‍♀️","🚶🏻‍♂️","🚶🏼‍♀️","🚶🏼‍♂️","🚶🏽‍♀️","🚶🏽‍♂️","🚶🏾‍♀️","🚶🏾‍♂️","🚶🏿‍♀️","🚶🏿‍♂️","🤦‍♀️","🤦‍♂️","🤦🏻‍♀️","🤦🏻‍♂️","🤦🏼‍♀️","🤦🏼‍♂️","🤦🏽‍♀️","🤦🏽‍♂️","🤦🏾‍♀️","🤦🏾‍♂️","🤦🏿‍♀️","🤦🏿‍♂️","🤵‍♀️","🤵‍♂️","🤵🏻‍♀️","🤵🏻‍♂️","🤵🏼‍♀️","🤵🏼‍♂️","🤵🏽‍♀️","🤵🏽‍♂️","🤵🏾‍♀️","🤵🏾‍♂️","🤵🏿‍♀️","🤵🏿‍♂️","🤷‍♀️","🤷‍♂️","🤷🏻‍♀️","🤷🏻‍♂️","🤷🏼‍♀️","🤷🏼‍♂️","🤷🏽‍♀️","🤷🏽‍♂️","🤷🏾‍♀️","🤷🏾‍♂️","🤷🏿‍♀️","🤷🏿‍♂️","🤸‍♀️","🤸‍♂️","🤸🏻‍♀️","🤸🏻‍♂️","🤸🏼‍♀️","🤸🏼‍♂️","🤸🏽‍♀️","🤸🏽‍♂️","🤸🏾‍♀️","🤸🏾‍♂️","🤸🏿‍♀️","🤸🏿‍♂️","🤹‍♀️","🤹‍♂️","🤹🏻‍♀️","🤹🏻‍♂️","🤹🏼‍♀️","🤹🏼‍♂️","🤹🏽‍♀️","🤹🏽‍♂️","🤹🏾‍♀️","🤹🏾‍♂️","🤹🏿‍♀️","🤹🏿‍♂️","🤼‍♀️","🤼‍♂️","🤽‍♀️","🤽‍♂️","🤽🏻‍♀️","🤽🏻‍♂️","🤽🏼‍♀️","🤽🏼‍♂️","🤽🏽‍♀️","🤽🏽‍♂️","🤽🏾‍♀️","🤽🏾‍♂️","🤽🏿‍♀️","🤽🏿‍♂️","🤾‍♀️","🤾‍♂️","🤾🏻‍♀️","🤾🏻‍♂️","🤾🏼‍♀️","🤾🏼‍♂️","🤾🏽‍♀️","🤾🏽‍♂️","🤾🏾‍♀️","🤾🏾‍♂️","🤾🏿‍♀️","🤾🏿‍♂️","🦸‍♀️","🦸‍♂️","🦸🏻‍♀️","🦸🏻‍♂️","🦸🏼‍♀️","🦸🏼‍♂️","🦸🏽‍♀️","🦸🏽‍♂️","🦸🏾‍♀️","🦸🏾‍♂️","🦸🏿‍♀️","🦸🏿‍♂️","🦹‍♀️","🦹‍♂️","🦹🏻‍♀️","🦹🏻‍♂️","🦹🏼‍♀️","🦹🏼‍♂️","🦹🏽‍♀️","🦹🏽‍♂️","🦹🏾‍♀️","🦹🏾‍♂️","🦹🏿‍♀️","🦹🏿‍♂️","🧍‍♀️","🧍‍♂️","🧍🏻‍♀️","🧍🏻‍♂️","🧍🏼‍♀️","🧍🏼‍♂️","🧍🏽‍♀️","🧍🏽‍♂️","🧍🏾‍♀️","🧍🏾‍♂️","🧍🏿‍♀️","🧍🏿‍♂️","🧎‍♀️","🧎‍♂️","🧎🏻‍♀️","🧎🏻‍♂️","🧎🏼‍♀️","🧎🏼‍♂️","🧎🏽‍♀️","🧎🏽‍♂️","🧎🏾‍♀️","🧎🏾‍♂️","🧎🏿‍♀️","🧎🏿‍♂️","🧏‍♀️","🧏‍♂️","🧏🏻‍♀️","🧏🏻‍♂️","🧏🏼‍♀️","🧏🏼‍♂️","🧏🏽‍♀️","🧏🏽‍♂️","🧏🏾‍♀️","🧏🏾‍♂️","🧏🏿‍♀️","🧏🏿‍♂️","🧔‍♀️","🧔‍♂️","🧔🏻‍♀️","🧔🏻‍♂️","🧔🏼‍♀️","🧔🏼‍♂️","🧔🏽‍♀️","🧔🏽‍♂️","🧔🏾‍♀️","🧔🏾‍♂️","🧔🏿‍♀️","🧔🏿‍♂️","🧖‍♀️","🧖‍♂️","🧖🏻‍♀️","🧖🏻‍♂️","🧖🏼‍♀️","🧖🏼‍♂️","🧖🏽‍♀️","🧖🏽‍♂️","🧖🏾‍♀️","🧖🏾‍♂️","🧖🏿‍♀️","🧖🏿‍♂️","🧗‍♀️","🧗‍♂️","🧗🏻‍♀️","🧗🏻‍♂️","🧗🏼‍♀️","🧗🏼‍♂️","🧗🏽‍♀️","🧗🏽‍♂️","🧗🏾‍♀️","🧗🏾‍♂️","🧗🏿‍♀️","🧗🏿‍♂️","🧘‍♀️","🧘‍♂️","🧘🏻‍♀️","🧘🏻‍♂️","🧘🏼‍♀️","🧘🏼‍♂️","🧘🏽‍♀️","🧘🏽‍♂️","🧘🏾‍♀️","🧘🏾‍♂️","🧘🏿‍♀️","🧘🏿‍♂️","🧙‍♀️","🧙‍♂️","🧙🏻‍♀️","🧙🏻‍♂️","🧙🏼‍♀️","🧙🏼‍♂️","🧙🏽‍♀️","🧙🏽‍♂️","🧙🏾‍♀️","🧙🏾‍♂️","🧙🏿‍♀️","🧙🏿‍♂️","🧚‍♀️","🧚‍♂️","🧚🏻‍♀️","🧚🏻‍♂️","🧚🏼‍♀️","🧚🏼‍♂️","🧚🏽‍♀️","🧚🏽‍♂️","🧚🏾‍♀️","🧚🏾‍♂️","🧚🏿‍♀️","🧚🏿‍♂️","🧛‍♀️","🧛‍♂️","🧛🏻‍♀️","🧛🏻‍♂️","🧛🏼‍♀️","🧛🏼‍♂️","🧛🏽‍♀️","🧛🏽‍♂️","🧛🏾‍♀️","🧛🏾‍♂️","🧛🏿‍♀️","🧛🏿‍♂️","🧜‍♀️","🧜‍♂️","🧜🏻‍♀️","🧜🏻‍♂️","🧜🏼‍♀️","🧜🏼‍♂️","🧜🏽‍♀️","🧜🏽‍♂️","🧜🏾‍♀️","🧜🏾‍♂️","🧜🏿‍♀️","🧜🏿‍♂️","🧝‍♀️","🧝‍♂️","🧝🏻‍♀️","🧝🏻‍♂️","🧝🏼‍♀️","🧝🏼‍♂️","🧝🏽‍♀️","🧝🏽‍♂️","🧝🏾‍♀️","🧝🏾‍♂️","🧝🏿‍♀️","🧝🏿‍♂️","🧞‍♀️","🧞‍♂️","🧟‍♀️","🧟‍♂️","👨‍🦰","👨‍🦱","👨‍🦲","👨‍🦳","👨🏻‍🦰","👨🏻‍🦱","👨🏻‍🦲","👨🏻‍🦳","👨🏼‍🦰","👨🏼‍🦱","👨🏼‍🦲","👨🏼‍🦳","👨🏽‍🦰","👨🏽‍🦱","👨🏽‍🦲","👨🏽‍🦳","👨🏾‍🦰","👨🏾‍🦱","👨🏾‍🦲","👨🏾‍🦳","👨🏿‍🦰","👨🏿‍🦱","👨🏿‍🦲","👨🏿‍🦳","👩‍🦰","👩‍🦱","👩‍🦲","👩‍🦳","👩🏻‍🦰","👩🏻‍🦱","👩🏻‍🦲","👩🏻‍🦳","👩🏼‍🦰","👩🏼‍🦱","👩🏼‍🦲","👩🏼‍🦳","👩🏽‍🦰","👩🏽‍🦱","👩🏽‍🦲","👩🏽‍🦳","👩🏾‍🦰","👩🏾‍🦱","👩🏾‍🦲","👩🏾‍🦳","👩🏿‍🦰","👩🏿‍🦱","👩🏿‍🦲","👩🏿‍🦳","🧑‍🦰","🧑‍🦱","🧑‍🦲","🧑‍🦳","🧑🏻‍🦰","🧑🏻‍🦱","🧑🏻‍🦲","🧑🏻‍🦳","🧑🏼‍🦰","🧑🏼‍🦱","🧑🏼‍🦲","🧑🏼‍🦳","🧑🏽‍🦰","🧑🏽‍🦱","🧑🏽‍🦲","🧑🏽‍🦳","🧑🏾‍🦰","🧑🏾‍🦱","🧑🏾‍🦲","🧑🏾‍🦳","🧑🏿‍🦰","🧑🏿‍🦱","🧑🏿‍🦲","🧑🏿‍🦳","❤️‍🔥","❤️‍🩹","🏳️‍⚧️","🏳️‍🌈","🏴‍☠️","🐈‍⬛","🐕‍🦺","🐦‍⬛","🐻‍❄️","👁️‍🗨️","😮‍💨","😵‍💫","😶‍🌫️","🧑‍🎄"];

module.exports = {
  random: function(options) {
    var numberOfEmojis = options.count;
    var result = [];
    emojis.push.apply(emojis, options.custom);
    for (var i = 0; i < numberOfEmojis; i++) {
      randomEmoji = emojis[Math.floor(Math.random() * emojis.length)];
      result.push(randomEmoji);
    }
    return result;
  }
};

},{}]},{},[1])(1)
});
